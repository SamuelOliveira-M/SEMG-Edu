// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Address{
  id                      String      @id @default(uuid())
  rua                     String  
  cidade                  String
  estado                  String
  cep                     String ?      @unique

  alunos                  Aluno[]     @relation("AddressToAlunos")
  escolas                 Escola[]    @relation("AdressToEscola")

}

model Responsavel{
  id                      String      @id @default(uuid())
  nome_pai                String ?
  nome_mae                String ?
  telefone                String
  telefone_secundario     String ?
 
  aluno                 Aluno[]       @relation("ResposibleToAlunos")
}

model Aluno{
  id                      String      @id @default(uuid())
  nome                    String
  data_nascimento         DateTime  
  municipio_nascimento    String
  uf_nascimento           String
  cpf                     String ?    @unique
  url_image               String ?

  responsavelId           String      @unique
  addressId               String      @unique
  matricula               Matricula?   
  
  responsavel             Responsavel @relation("ResposibleToAlunos",fields: [responsavelId], references: [id],onDelete: Cascade)
  address                 Address     @relation("AddressToAlunos",fields: [addressId],references: [id],onDelete: Cascade)
}

model Escola {
  id                      String      @id @default(uuid())
  nome                    String
  cod_inep                String         @unique
  email                   String      @unique

  addressId               String      @unique
  matriculas              Matricula[] 
  
  turmas                  Turma[]     @relation("EscolaToTurma")
  address                 Address     @relation("AdressToEscola",fields: [addressId],references: [id],onDelete: Cascade)
}

model AnoLetivo{
  id                      String      @id @default(uuid())
  data_inicio             DateTime

  turmas                  Turma[]     @relation("AnoLetivoToTurma")
  avaliacoes             Avaliacao[]  
}

model Turma {
  id                      String      @id @default(uuid())
  nome                    String      @unique
  serie                   Int
  turno                   String
  status                  String

  escolaId                String      
  ano_letivoId            String        
  
  matriculas              Matricula[]
  disciplinasTurmas       Professor_Disciplina_Turma[]
  historicoDisciplinasTurmas Historico_Professor_Disciplina_Turma[]
  
  escola                  Escola      @relation("EscolaToTurma",fields: [escolaId],references: [id],onDelete: Cascade)
  ano_letivo              AnoLetivo   @relation("AnoLetivoToTurma",fields: [ano_letivoId],references: [id],onDelete: Cascade)
}

model Matricula {
  id                      String      @id @default(uuid())
  numero_matricula        String
  status                  String 
  
  escolaId                String                
  turmaId                 String      
  alunoId                 String      @unique

  escola                  Escola      @relation(fields: [escolaId],references: [id] ,onDelete: Cascade)
  turma                   Turma       @relation(fields: [turmaId], references: [id],onDelete: Cascade)
  aluno                   Aluno       @relation(fields: [alunoId], references: [id],onDelete: Cascade)
  avaliacao               Avaliacao[]
}

model Avaliacao{
  id                      String      @id @default(uuid())
  tipo                    String
  nota                    Float
  mes                     Int ?            
  semestre                Int

  anoLetivoId             String
  disciplinaId            String      
  matriculaId             String      

  disciplina              Disciplina  @relation(fields: [disciplinaId],references: [id],onDelete: Cascade)
  matricula               Matricula   @relation(fields: [matriculaId],references: [id],onDelete: Cascade)
  
  anoLetivo               AnoLetivo   @relation(fields: [anoLetivoId],references: [id],onDelete: Cascade)

}


model Disciplina {
  id                      String      @id @default(uuid())
  nome                    String      @unique
  carga_horaria           Int

  avaliacao               Avaliacao[]
  disciplinasTurmas       Professor_Disciplina_Turma[]
  historicoDisciplinasTurmas Historico_Professor_Disciplina_Turma[]
}

model Professor {
  id                      String      @id @default(uuid())
  nome                    String
  cpf                     String ?    @unique
  email                   String      @unique
  senha                   String
  data_nascimento         DateTime  
  uf_nascimento           String
  url_image               String ?
  municipio_nascimento    String
      

  refresh_token           RefreshTokenProfessor?

  disciplinasTurmas       Professor_Disciplina_Turma[]
  historicoDisciplinasTurmas Historico_Professor_Disciplina_Turma[]
}


model Gestor{
  id                      String      @id @default(uuid())
  nome                    String
  email                   String      @unique
  senha                   String

  refresh_token           RefreshTokenGestor?
}

model RefreshTokenGestor{
  id                      String      @id @default(uuid())
  expiresIn               Int
  gestor                  Gestor     @relation(fields: [gestorId],references: [id], onDelete: Cascade)
  gestorId                String   @unique

  @@map("refresh_token")
}

model RefreshTokenProfessor{
  id                      String   @id @default(uuid())
  expiresIn               Int
  professor               Professor     @relation(fields: [professorId],references: [id], onDelete: Cascade)
  professorId             String   @unique

  @@map("refresh_token_professor")
}


model Professor_Disciplina_Turma {
  id                      String      @id @default(uuid())
  dataAlteracao    DateTime  @default(now())
  
  // Chaves estrangeiras
  professorId      String
  disciplinaId     String
  turmaId          String

  // Relações com as tabelas principais
  professor        Professor  @relation(fields: [professorId], references: [id])
  disciplina       Disciplina @relation(fields: [disciplinaId], references: [id])
  turma            Turma      @relation(fields: [turmaId], references: [id])
  
  @@index([professorId], name: "idx_professor_id")
  @@index([disciplinaId], name: "idx_disciplina_id")
  @@index([turmaId], name: "idx_turma_id")
}

model Historico_Professor_Disciplina_Turma {
  id                      String      @id @default(uuid())
  dataAlteracao    DateTime  @default(now())

  // Chaves estrangeiras
  professorId      String
  disciplinaId     String
  turmaId          String

  // Relações com as tabelas principais
  professor        Professor  @relation(fields: [professorId], references: [id])
  disciplina       Disciplina @relation(fields: [disciplinaId], references: [id])
  turma            Turma      @relation(fields: [turmaId], references: [id])

  @@index([professorId], name: "idx_historico_professor_id")
  @@index([disciplinaId], name: "idx_historico_disciplina_id")
  @@index([turmaId], name: "idx_historico_turma_id")
}